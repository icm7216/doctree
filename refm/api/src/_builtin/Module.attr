#@since 3.0
--- attr(*name) -> [Symbol]
--- attr(name, true) -> [Symbol]
--- attr(name, false) -> [Symbol]
#@else
--- attr(*name) -> nil
--- attr(name, true) -> nil
--- attr(name, false) -> nil
#@end

インスタンス変数読み取りのためのインスタンスメソッド name を定義します。

#@since 3.0
#@samplecode 例
class User
  attr :name # => [:name]
  # 複数の名前を渡すこともできる
  attr :id, :age # => [:id, :age]
end
#@end
#@end

このメソッドで定義されるアクセスメソッドの定義は次の通りです。

#@samplecode 例
def name
  @name
end
#@end

第 2 引数 が true で指定された場合には、属性の書き込み用メソッド name= も同時に定義されます。
その定義は次の通りです。

#@samplecode 例
def name=(val)
  @name = val
end
#@end

第 2 引数 に true か false を指定する方法は非推奨です。

@param name [[c:String]] または [[c:Symbol]] で指定します。
#@since 3.0
@return 定義されたメソッド名を [[c:Symbol]] の配列で返します。
#@end

#@since 3.0
--- attr_accessor(*name) -> [Symbol]
#@else
--- attr_accessor(*name) -> nil
#@end

インスタンス変数 name に対する読み取りメソッドと書き込みメソッドの両方を
定義します。

#@since 3.0
#@samplecode 例
class User
  attr_accessor :name # => [:name, :name=]
  # 複数の名前を渡すこともできる
  attr_accessor :id, :age # => [:id, :id=, :age, :age=]
end
#@end
#@end

このメソッドで定義されるメソッドの定義は以下の通りです。

#@samplecode 例
def name
  @name
end
def name=(val)
  @name = val
end
#@end

@param name [[c:String]] または [[c:Symbol]] を 1 つ以上指定します。
#@since 3.0
@return 定義されたメソッド名を [[c:Symbol]] の配列で返します。
#@end

#@since 3.0
--- attr_reader(*name) -> [Symbol]
#@else
--- attr_reader(*name) -> nil
#@end

インスタンス変数 name の読み取りメソッドを定義します。

#@since 3.0
#@samplecode 例
class User
  attr_reader :name # => [:name]
  # 複数の名前を渡すこともできる
  attr_reader :id, :age # => [:id, :age]
end
#@end
#@end

このメソッドで定義されるメソッドの定義は以下の通りです。

#@samplecode 例
def name
  @name
end
#@end

@param name [[c:String]] または [[c:Symbol]] を 1 つ以上指定します。
#@since 3.0
@return 定義されたメソッド名を [[c:Symbol]] の配列で返します。
#@end

#@since 3.0
--- attr_writer(*name) -> [Symbol]
#@else
--- attr_writer(*name) -> nil
#@end

インスタンス変数 name への書き込みメソッド (name=) を定義します。

#@since 3.0
#@samplecode 例
class User
  attr_writer :name # => [:name=]
  # 複数の名前を渡すこともできる
  attr_writer :id, :age # => [:id=, :age=]
end
#@end
#@end

このメソッドで定義されるメソッドの定義は以下の通りです。

#@samplecode 例
def name=(val)
  @name = val
end
#@end

@param name [[c:String]] または [[c:Symbol]] を 1 つ以上指定します。
#@since 3.0
@return 定義されたメソッド名を [[c:Symbol]] の配列で返します。
#@end
