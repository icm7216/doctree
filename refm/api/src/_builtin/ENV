= object ENV

extend Enumerable

環境変数を表すオブジェクト。[[c:Hash]] と同様のインターフェースを持ち
ます。ただし、Hash と異なり、ENV のキーと値には文字列しか
とることができません。

#@until 2.7.0
ENV で得られる文字列は ENV['PATH'] 以外は常に汚染されています。
オブジェクトの汚染に関しては [[d:spec/safelevel]] を参照して下さい。
ENV['PATH'] はその要素が誰でも書き込み可能なディレクトリを含ん
でいる場合に限り汚染されます。

#@samplecode 例
p ENV['TERM'].tainted?  # => true
p path = ENV['PATH']    # => "/usr/local/bin:/usr/bin:/bin:/usr/X11/bin"
p path.tainted?         # => false
#@end
#@end

また、ENV で得られる文字列は [[m:Object#freeze]] されています。

#@samplecode 例
p ENV['TERM'].frozen?  # => true
#@end

Windows では環境変数は大文字、小文字を区別しません。(cygwin を除く)

#@samplecode 例
ENV['OS'] # => Windows_NT
ENV['os'] # => Windows_NT
#@end

--- [](key) -> String

key に対応する環境変数の値を返します。該当する環境変数が存在
しない時には nil を返します。

@param key 環境変数名を指定します。文字列で指定します。文字列以外のオブ
           ジェクトを指定した場合は to_str メソッドによる暗黙の型変換
           を試みます。

#@samplecode
ENV['PATH']           # => "/usr/local/bin:/usr/bin:/bin:/usr/X11/bin"
ENV['NON_EXIST_KEY']  # => nil
#@end

--- []=(key, value)
--- store(key, value) -> String

key に対応する環境変数の値を value にします。
value が nil の時、key に対応する環境変数を取り除きます。

@param key   環境変数名を指定します。文字列で指定します。文字列以外のオ
             ブジェクトを指定した場合は to_str メソッドによる暗黙の型変
             換を試みます。
@param value 置き換えるべき値を指定します。文字列で指定します。文字列以
             外のオブジェクトを指定した場合は to_str メソッドによる暗黙
             の型変換を試みます。

@return value を返します。

#@samplecode
ENV['NEW_KEY'] = 'some_value'
ENV['NEW_KEY'] # => 'some_value'
ENV.store('NEW_KEY', nil) # => nil
ENV.has_key?('NEW_KEY') # => false
#@end

--- clear  -> self

環境変数をすべてクリアします。self を返します。

#@samplecode
ENV.clear
p ENV # => {}
#@end

--- delete(key) -> String | nil
--- delete(key) {|key| ... } -> String | nil

key に対応する環境変数を取り除きます。取り除かれた環境変数の
値を返しますが、key に対応する環境変数が存在しない時には
nil を返します。

ブロックが与えられた時には key にマッチするものがなかった時
に評価されます。

@param key 環境変数名を指定します。文字列で指定します。文字列で指定しま
           す。文字列以外のオブジェクトを指定した場合は to_str メソッド
           による暗黙の型変換を試みます。

#@samplecode
ENV['TEST'] = 'foo'
ENV.delete('TEST')  # => "foo"
ENV.delete('TEST') { |key| puts "#{key} is not found in ENV" } # TEST is not found in ENV
#@end

#@since 1.9.1
--- reject                     -> Enumerator
#@else
--- reject                     -> Enumerable::Enumerator
#@end
--- reject {|key, value| ... } -> Hash

環境変数のうち、ブロックを評価した値が真であるものをとり除きます。
[[m:Enumerable#reject]] と異なり Hash を返します。また、とり除いた結果
は実際の環境変数に影響を与えません。

#@samplecode
ENV['TEST'] = 'foo'
result = ENV.reject { |key, value| key == 'TEST' }
result['TEST'] # => nil
ENV['TEST'] # => "foo"
#@end

--- delete_if {|key, value| ... } -> ENV
--- reject! {|key, value| ... }   -> ENV | nil
#@since 1.9.1
--- delete_if  -> Enumerator
--- reject!    -> Enumerator
#@else
--- delete_if  -> Enumerable::Enumerator
--- reject!    -> Enumerable::Enumerator
#@end

key と value を引数としてブロックを評価した値が真であ
る時、環境変数を削除します。

reject! は要素に変化がなければ nil を返します。

#@samplecode
ENV['FOO'] = 'bar'
ENV.delete_if { |key, value| key == 'FOO' && value == 'bar' } # => ENV
ENV.reject! { |key, value| key == 'FOO' && value == 'bar' } # => nil
#@end

#@since 1.9.1
--- each                          -> Enumerator
--- each_pair                     -> Enumerator
#@else
--- each                          -> Enumerable::Enumerator
--- each_pair                     -> Enumerable::Enumerator
#@end
--- each {|key, value| ... }      -> self
--- each_pair {|key, value| ... } -> self
key と value を引数としてブロックを評価します。

#@samplecode
ENV['FOO'] = 'bar'
ENV.each do |key, value|
  p "value is #{value}" if key == 'FOO' # => "value is bar"
end
# => ENV
#@end

#@since 1.9.1
--- each_key              -> Enumerator
#@else
--- each_key              -> Enumerable::Enumerator
#@end
--- each_key {|key| ... } -> self
key を引数としてブロックを評価します。

#@samplecode
ENV['FOO'] = 'bar'
ENV.each_key do |key|
  p "key #{key} detected" if key == 'FOO'
end
# "key FOO detected"
#@end

#@since 1.9.1
--- each_value                -> Enumerator
#@else
--- each_value                -> Enumerable::Enumerator
#@end
--- each_value {|value| ... } -> self
value を引数としてブロックを評価します。

--- empty? -> bool

環境変数がひとつも定義されていない時真を返します。

--- fetch(key) -> String
--- fetch(key, default) -> String
--- fetch(key) {|key| ... } -> String

key に関連づけられた値を返します。該当するキーが登録されてい
ない時には、引数 default が与えられていればその値を、ブロッ
クが与えられていればそのブロックを評価した値を返します。そのいずれ
でもなければ例外が発生します。

@param key       環境変数の名前を指定します。 文字列で指定します。
                 文字列以外のオブジェクトを指定した場合は
                 to_str メソッドによる暗黙の型変換を試みます。
@param default   keyに対応する環境変数の値がないときにこの値を返します。 
#@since 1.9.1
@raise  KeyError   引数defaultもブロックも与えられてない時、キーの探索に失敗すると発生します。
#@else
@raise  IndexError 引数defaultもブロックも与えられてない時、キーの探索に失敗すると発生します。
#@end

--- has_key?(key) -> bool
--- include?(key) -> bool
--- key?(key)     -> bool
--- member?(key)  -> bool

key で指定される環境変数が存在する時、真を返します。

@param key 環境変数の名前を指定します。文字列で指定します。
           文字列以外のオブジェクトを指定した場合は to_str メソッ
           ドによる暗黙の型変換を試みます。

--- has_value?(val) -> bool
--- value?(val)     -> bool

val を値として持つ環境変数が存在する時、真を返します。

@param val 値を指定します。文字列で指定します。文字
           列以外のオブジェクトを指定した場合は to_str メソッドによる暗
           黙の型変換を試みます。

#@since 1.9.1
--- key(val)   -> String | nil
#@end
#@until 3.0
--- index(val) -> String | nil
#@end

val に対応するキーを返します。対応する要素が存在しない時には
nil を返します。

#@until 3.0
[[m:ENV.index]] は obsolete です。使用すると警告メッセージが表示されます。
[[m:ENV.key]] を使用してください。
#@end

@param val 値を指定します。文字列で指定します。文字
           列以外のオブジェクトを指定した場合は to_str メソッドによる暗
           黙の型変換を試みます。

--- inspect -> String

ENV オブジェクトを文字列化します。 [[m:Hash#inspect]] と同じように動作します。

--- invert -> Hash

環境変数の値をキー、名前を値とした [[c:Hash]] を生成して返します。

--- keys -> [String]

全環境変数の名前の配列を返します。

--- length -> Integer
--- size   -> Integer

環境変数の数を返します。

--- rehash -> nil

何もしません。nilを返します。

--- replace(hash) -> ENV

環境変数を hash と同じ内容に変更します。 self を返します。

@param hash  キーと値の対応関係を指定します。 to_hash でハッシュに変換されます。

--- select                      -> Enumerator
--- select {|key, value| ... }  -> Hash
#@since 2.6.0
--- filter                      -> Enumerator
--- filter {|key, value| ... }  -> Hash
#@end

環境変数名と値についてブロックを評価し、真を返したものを集めたハッシュ
を返します。

--- shift -> [String, String] | nil

環境変数を一つ取り除いて、それを名前と値の組の配列で返します。
環境変数が一つも設定されていなければ nil を返します。

--- to_a -> [[String, String]]

環境変数から [変数名, 値] となる 2 要素の配列の配列を生成します。

--- to_hash -> Hash

環境変数の名前をキーとし、対応する値をもつハッシュを返します。

--- to_h -> Hash
#@since 2.6.0
--- to_h {|name, value| block } -> Hash
#@end

環境変数の名前をキーとし、対応する値をもつハッシュを返します。

#@since 2.6.0
ブロックを指定すると各ペアでブロックを呼び出し、
その結果をペアとして使います。
#@samplecode ブロック付きの例
ENV.to_h {|name, value| [name, value.size] }
#@end
#@end

--- to_s -> String

環境変数を文字列化します。 Hash#to_s と同じように動作します。

#@since 3.2
--- merge!(*others) -> ENV
--- merge!(*others) {|key, self_val, other_val| ... } -> ENV
--- update(*others) -> ENV
--- update(*others) {|key, self_val, other_val| ... } -> ENV

ハッシュ others の内容を環境変数にマージします。重複するキー
に対応する値は others の内容で上書きされます。

self と others に同じキーがあった場合はブロック付きか否かで
判定方法が違います。ブロック付きのときはブロックを呼び出して
その返す値を重複キーに対応する値にします。ブロック付きでない
場合は常に others の値を使います。

@param others マージ用のハッシュです。
#@else
--- update(other) -> ENV
--- update(other) {|key, self_val, other_val| ... } -> ENV
#@since 2.7.0
--- merge!(other) -> ENV
--- merge!(other) {|key, self_val, other_val| ... } -> ENV
#@end

ハッシュ other の内容を環境変数にマージします。重複するキー
に対応する値は other の内容で上書きされます。

self と other に同じキーがあった場合はブロック付きか否かで
判定方法が違います。ブロック付きのときはブロックを呼び出して
その返す値を重複キーに対応する値にします。ブロック付きでない
場合は常に other の値を使います。

@param other  上書きするハッシュを指定します。
#@end
--- values -> [String]

環境変数の全値の配列を返します。

--- values_at(*key) -> [String]

引数で指定されたキー(環境変数名)に対応する値の配列を返します。存在
しないキーに対しては nil が対応します。
#@until 1.9.1
[[m:ENV.indexes]] と [[m:ENV.indices]] と同じです。
#@end

例:

  ENV.update({'FOO' => 'foo', 'BAR' => 'bar'})
  p ENV.values_at(*%w(FOO BAR BAZ))   # => ["foo", "bar", nil]

@param key 環境変数名を指定します。文字列で指定します。
           文字列以外のオブジェクトを指定した場合は to_str メソッドによる暗黙の型変換を試みます。
           
#@since 1.9.1
--- assoc(key) -> Array | nil

自身が与えられたキーに対応する要素を持つとき、見つかった要素のキーと値のペアを
配列として返します。

@param key 検索するキーを指定します。

@see [[m:Hash#assoc]]

--- rassoc(value) -> Array | nil

自身が与えられた値に対応する要素を持つとき、見つかった要素のキーと値のペアを
配列として返します。

@param value 検索する値を指定します。

@see [[m:Hash#rassoc]]

#@end

#@since 1.9.2
--- keep_if {|key, value| ... } -> ENV
--- select! {|key, value| ... } -> ENV | nil
#@since 2.6.0
--- filter! {|key, value| ... } -> ENV | nil
#@end
--- keep_if -> Enumerator
--- select! -> Enumerator
#@since 2.6.0
--- filter! -> Enumerator
#@end

キーと値を引数としてブロックを評価した結果が真であ
るような要素を環境変数に残します。

keep_if は常に self を返します。
#@since 2.6.0
select! と filter! はオブジェクトが変更された場合に self を、
#@else
select! はオブジェクトが変更された場合に self を、
#@end
されていない場合に nil を返します。

ブロックが省略された場合には [[c:Enumerator]] を返します。

@see [[m:ENV.delete_if]],[[m:ENV.reject!]], [[m:Hash#keep_if]], [[m:Hash#select!]],
#@end
#@since 2.6.0
--- slice(*keys) -> Hash

引数で指定されたキーとその値だけを含む Hash を返します。

#@samplecode 例
ENV["foo"] = "bar"
ENV["baz"] = "qux"
ENV["bar"] = "rab"
ENV.slice()             # => {}
ENV.slice("")           # => {}
ENV.slice("unknown")    # => {}
ENV.slice("foo", "baz") # => {"foo"=>"bar", "baz"=>"qux"}
#@end

#@since 3.0
@see [[m:Hash#slice]], [[m:ENV.except]]
#@else
@see [[m:Hash#slice]]
#@end
#@end
#@since 2.7.0
--- freeze -> ()
ENV.freeze は環境変数の変更を禁止できないため、[[c:TypeError]]を発生させます。
#@end
#@since 3.0
--- except(*keys) -> Hash

引数で指定された以外のキーとその値だけを含む Hash を返します。

#@samplecode
ENV                       #=> {"LANG"=>"en_US.UTF-8", "TERM"=>"xterm-256color", "HOME"=>"/Users/rhc"}
ENV.except("TERM","HOME") #=> {"LANG"=>"en_US.UTF-8"}
#@end

@see [[m:Hash#except]], [[m:ENV.slice]]
#@end
--- clone(freeze: true) -> object
ENV オブジェクトの複製を作成して返します。

ENV は OS のプロセス全体で共有される環境変数を操作するラッパーオブジェクトなので、複製は有用ではありません。
そのため、3.1 からは複製で環境変数を操作するときに deprecated 警告がでます。

テスト実行中に環境変数を退避する用途には [[m:ENV.to_h]] を使用してください。

#@samplecode
saved_env = ENV.to_h
# (テストなど)
ENV.replace(saved_env)
#@end

@see [[m:Object#clone]]
#@since 3.1
@see [[m:ENV.dup]]
--- dup -> ()
[[c:TypeError]]を発生させます。

3.0 以前では Object.new と同様の ENV とは無関係の有用ではないオブジェクトを返していたため、3.1 からは例外が発生するようになりました。
詳細は[[m:ENV.clone]]を参照してください。

@see [[m:ENV.clone]]
#@end
