= class MatchData < Object

正規表現のマッチに関する情報を扱うためのクラス。

このクラスのインスタンスは、
 * [[m:Regexp.last_match]]
 * [[m:Regexp#match]], [[m:String#match]]
 * [[m:$~]]
などにより得られます。

== Instance Methods

--- [](n) -> String | nil

n 番目の部分文字列を返します。

0 はマッチ全体を意味します。
n の値が負の時には末尾からのインデックスと見倣します(末尾の
要素が -1 番目)。n 番目の要素が存在しない時には nil を返します。

@param n 返す部分文字列のインデックスを指定します。

#@samplecode 例
/(foo)(bar)(BAZ)?/ =~ "foobarbaz"
p $~.to_a       # => ["foobar", "foo", "bar", nil]
p $~[0]         # => "foobar"
p $~[1]         # => "foo"
p $~[2]         # => "bar"
p $~[3]         # => nil        (マッチしていない)
p $~[4]         # => nil        (範囲外)
p $~[-2]        # => "bar"
#@end

--- [](range) -> [String]

[[c:Range]] オブジェクト range の範囲にある要素からなる部分配列を返します。

@param range start..end 範囲式。

#@samplecode 例
/(foo)(bar)/ =~ "foobarbaz"
p $~[0..2]      # => ["foobar", "foo", "bar"]
#@end

--- [](start, length) -> [String]

start 番目から length 個の要素を含む部分配列を返します。

#@samplecode 例
/(foo)(bar)/ =~ "foobarbaz"
p $~[0, 3]      # => ["foobar", "foo", "bar"]
#@end

@see [[m:Array#[] ]]

--- [](name) -> String | nil

name という名前付きグループにマッチした文字列を返します。

@param name 名前(シンボルか文字列)
@raise IndexError 指定した名前が正規表現内に含まれていない場合に発生します

#@samplecode 例
/\$(?<dollars>\d+)\.(?<cents>\d+)/.match("$3.67")[:cents] # => "67"
/(?<alpha>[a-zA-Z]+)|(?<num>\d+)/.match("aZq")[:num] # => nil
#@end

--- begin(n) -> Integer | nil

n 番目の部分文字列先頭のオフセットを返します。

0 はマッチ全体を意味します。
n 番目の部分文字列がマッチしていなければ nilを返します。

@param n 部分文字列を指定する数値。

@raise IndexError 範囲外の n を指定した場合に発生します。

#@samplecode 例
/(foo)(bar)(BAZ)?/ =~ "foobarbaz"
p $~.begin(0)   # => 0
p $~.begin(1)   # => 0
p $~.begin(2)   # => 3
p $~.begin(3)   # => nil
p $~.begin(4)   # => `begin': index 4 out of matches (IndexError)
#@end

@see [[m:MatchData#end]]

--- end(n) -> Integer | nil

n 番目の部分文字列終端のオフセットを返します。

0 はマッチ全体を意味します。
n 番目の部分文字列がマッチしていなければ nil を返します。

@param n 部分文字列を指定する数値。

@raise IndexError 範囲外の n を指定した場合に発生します。

#@samplecode 例
/(foo)(bar)(BAZ)?/ =~ "foobarbaz"
p $~.end(0)   # => 6
p $~.end(1)   # => 3
p $~.end(2)   # => 6
p $~.end(3)   # => nil
p $~.end(4)   # => `end': index 4 out of matches (IndexError)
#@end

@see [[m:MatchData#begin]]

--- captures -> [String]
#@since 3.2
--- deconstruct -> [String]
#@end

[[m:$1]], [[m:$2]], ... を格納した配列を返します。

[[m:MatchData#to_a]] と異なり [[m:$&]] を要素に含みません。
グループにマッチした部分文字列がなければ対応する要素は nil になります。

#@samplecode 例
/(foo)(bar)(BAZ)?/ =~ "foobarbaz"
p $~.to_a       # => ["foobar", "foo", "bar", nil]
p $~.captures   # => ["foo", "bar", nil]
#@end

#@since 3.2
@see [[m:MatchData#to_a]], [[m:MatchData#named_captures]], [[ref:d:spec/pattern_matching#matching_non_primitive_objects]]
#@else
@see [[m:MatchData#to_a]], [[m:MatchData#named_captures]]
#@end

#@since 3.2
--- deconstruct_keys(array_of_names) -> Hash

引数で指定された名前の名前付きキャプチャを [[c:Hash]] で返します。

[[c:Hash]] のキーは名前付きキャプチャの名前のシンボル、値はキーの名前に対応した名前付きグループのうち最後にマッチした文字列です。

@param array_of_names 名前付きキャプチャの名前の配列を指定します。nil の場合は全ての名前付きキャプチャを意味します。

#@samplecode 例
m = /(?<hours>\d{2}):(?<minutes>\d{2}):(?<seconds>\d{2})/.match("18:37:22")
m.deconstruct_keys([:hours, :minutes]) # => {:hours => "18", :minutes => "37"}
m.deconstruct_keys(nil) # => {:hours => "18", :minutes => "37", :seconds => "22"}

# 名前付きキャプチャが定義されていなかった場合は空のハッシュを返す
m = /(\d{2}):(\d{2}):(\d{2})/.match("18:37:22")
m.deconstruct_keys(nil) # => {}
#@end

@see [[ref:d:spec/pattern_matching#matching_non_primitive_objects]]
#@end

--- length -> Integer
--- size -> Integer

部分文字列の数を返します(self.to_a.size と同じです)。

#@samplecode 例
/(foo)(bar)(BAZ)?/ =~ "foobarbaz"
p $~.size       # => 4
#@end

--- offset(n) -> [Integer, Integer] | [nil, nil]

n 番目の部分文字列のオフセットの配列 [start, end] を返
します。

#@samplecode 例
[ self.begin(n), self.end(n) ]
#@end

と同じです。n番目の部分文字列がマッチしていなければ
[nil, nil] を返します。

@param n 部分文字列を指定する数値

@raise IndexError 範囲外の n を指定した場合に発生します。

#@since 3.2
@see [[m:MatchData#begin]], [[m:MatchData#end]], [[m:MatchData#byteoffset]]
#@else
@see [[m:MatchData#begin]], [[m:MatchData#end]]
#@end
--- offset(name) -> [Integer, Integer] | [nil, nil]

name という名前付きグループに対応する部分文字列のオフセットの配列 [start, end] を返
します。

#@samplecode 例
[ self.begin(name), self.end(name) ]
#@end

と同じです。nameの名前付きグループにマッチした部分文字列がなければ
[nil, nil] を返します。

@param name 名前(シンボルか文字列)

@raise IndexError 正規表現中で定義されていない name を指定した場合に発生します。

#@samplecode 例
/(?<year>\d{4})年(?<month>\d{1,2})月(?:(?<day>\d{1,2})日)?/ =~ "2021年1月"
p $~.offset('year')    # => [0, 4]
p $~.offset(:year)     # => [0, 4]
p $~.offset('month')   # => [5, 6]
p $~.offset(:month)    # => [5, 6]
p $~.offset('day')     # => [nil, nil]
p $~.offset('century') # => `offset': undefined group name reference: century (IndexError)
#@end

#@since 3.2
@see [[m:MatchData#begin]], [[m:MatchData#end]], [[m:MatchData#byteoffset]]
#@else
@see [[m:MatchData#begin]], [[m:MatchData#end]]
#@end
#@since 3.2
--- byteoffset(n) -> [Integer, Integer] | [nil, nil]

n 番目の部分文字列のバイト単位のオフセットの
配列 [start, end] を返します。

n番目の部分文字列がマッチしていなければ [nil, nil] を返します。

@param n 部分文字列を指定する数値

@raise IndexError 範囲外の n を指定した場合に発生します。

@see [[m:MatchData#offset]]

--- byteoffset(name) -> [Integer, Integer] | [nil, nil]

name という名前付きグループに対応する部分文字列のバイト単位のオフセットの
配列 [start, end] を返します。

nameの名前付きグループにマッチした部分文字列がなければ
[nil, nil] を返します。

@param name 名前(シンボルか文字列)

@raise IndexError 正規表現中で定義されていない name を指定した場合に発生します。

#@samplecode 例
/(?<year>\d{4})年(?<month>\d{1,2})月(?:(?<day>\d{1,2})日)?/ =~ "2021年1月"
p $~.byteoffset('year')    # => [0, 4]
p $~.byteoffset(:year)     # => [0, 4]
p $~.byteoffset('month')   # => [7, 8]
p $~.byteoffset(:month)    # => [7, 8]
p $~.byteoffset('day')     # => [nil, nil]
p $~.byteoffset('century') # => `offset': undefined group name reference: century (IndexError)
#@end

@see [[m:MatchData#offset]]
#@end

#@since 3.4
--- bytebegin(n) -> Integer | nil
--- bytebegin(name) -> Integer | nil

n 番目の部分文字列先頭のバイトオフセットを返します。

0 はマッチ全体を意味します。
n 番目の部分文字列がマッチしていなければ nilを返します。

引数に文字列またはシンボルを渡した場合は、対応する名前付きキャプチャの先頭のバイトオフセットを返します。

@param n 部分文字列を指定する数値。
@param name 名前付きキャプチャを指定する文字列またはシンボル。

@raise IndexError 範囲外の n を指定した場合に発生します。
@raise IndexError 正規表現中で定義されていない name を指定した場合に発生します。

#@samplecode 例
/(c).*(いう).*(e.*)/ =~ 'abcあいうdef'
p $~              # => #<MatchData "cあいうdef" 1:"c" 2:"いう" 3:"ef">
p $~.bytebegin(0) # => 2
p $~.bytebegin(1) # => 2
p $~.bytebegin(2) # => 6
p $~.bytebegin(3) # => 13
p $~.bytebegin(4) # => index 4 out of matches (IndexError)
#@end

#@samplecode シンボルを指定する例
/(?<key>\S+):\s*(?<value>\S+)/ =~ "name: ruby"
$~                   # => #<MatchData "name: ruby" key:"name" value:"ruby">
$~.bytebegin(:key)   # => 0
$~.bytebegin(:value) # => 6
$~.bytebegin(:foo)   # => undefined group name reference: foo (IndexError)
#@end

--- byteend(n) -> Integer | nil
--- byteend(name) -> Integer | nil

n 番目の部分文字列終端のバイトオフセットを返します。

0 はマッチ全体を意味します。
n 番目の部分文字列がマッチしていなければ nilを返します。

引数に文字列またはシンボルを渡した場合は、対応する名前付きキャプチャの終端のバイトオフセットを返します。

@param n 部分文字列を指定する数値。
@param name 名前付きキャプチャを指定する文字列またはシンボル。

@raise IndexError 範囲外の n を指定した場合に発生します。
@raise IndexError 正規表現中で定義されていない name を指定した場合に発生します。

#@samplecode 例
/(c).*(いう).*(e.*)/ =~ 'abcあいうdef'
p $~            # => #<MatchData "cあいうdef" 1:"c" 2:"いう" 3:"ef">
p $~.byteend(0) # => 15
p $~.byteend(1) # => 3
p $~.byteend(2) # => 12
p $~.byteend(3) # => 15
p $~.byteend(4) # => index 4 out of matches (IndexError)
#@end

#@samplecode シンボルを指定する例
/(?<key>\S+):\s*(?<value>\S+)/ =~ "name: ruby"
$~                 # => #<MatchData "name: ruby" key:"name" value:"ruby">
$~.byteend(:key)   # => 4
$~.byteend(:value) # => 10
$~.byteend(:foo)   # => undefined group name reference: foo (IndexError)
#@end

#@end

--- post_match -> String

マッチした部分より後ろの文字列を返します([[m:$']]と同じ)。

#@samplecode 例
/(bar)(BAZ)?/ =~ "foobarbaz"
p $~.post_match # => "baz"
#@end

@see [[m:MatchData#pre_match]]

--- pre_match -> String

マッチした部分より前の文字列を返します([[m:$`]]と同じ)。

#@samplecode 例
/(bar)(BAZ)?/ =~ "foobarbaz"
p $~.pre_match  # => "foo"
#@end

@see [[m:MatchData#post_match]]

--- string -> String

マッチ対象になった文字列の複製を返します。

返す文字列はフリーズ([[m:Object#freeze]])されています。

#@samplecode 例
m = /(.)(.)(\d+)(\d)/.match("THX1138.")
m.string   # => "THX1138."
#@end

--- to_a -> [String]

[[m:$&]], [[m:$1]], [[m:$2]],... を格納した配列を返します。

#@samplecode 例
/(foo)(bar)(BAZ)?/ =~ "foobarbaz"
p $~.to_a       # => ["foobar", "foo", "bar", nil]
#@end

@see [[m:MatchData#captures]]

--- to_s -> String

マッチした文字列全体を返します。

#@samplecode 例
/bar/ =~ "foobarbaz"
p $~            # => #<MatchData:0x401b1be4>
p $~.to_s       # => "bar"
#@end

--- inspect -> String

self の内容を人間に読みやすい文字列にして返します。

#@samplecode 例
puts /.$/.match("foo").inspect
# => #<MatchData "o">

puts /(.)(.)(.)/.match("foo").inspect
# => #<MatchData "foo" 1:"f" 2:"o" 3:"o">

puts /(.)(.)?(.)/.match("fo").inspect
# => #<MatchData "fo" 1:"f" 2:nil 3:"o">

puts /(?<foo>.)(?<bar>.)(?<baz>.)/.match("hoge").inspect
# => #<MatchData "hog" foo:"h" bar:"o" baz:"g">
#@end

--- values_at(*index) -> [String]

正規表現中の n 番目の括弧にマッチした部分文字列の配列を返します。

0 番目は [[m:$&]] のようにマッチした文字列全体を表します。

@param index インデックスを整数またはシンボル(名前付きキャプチャの場合)で 0 個以上指定します。

#@samplecode 例
m = /(foo)(bar)(baz)/.match("foobarbaz")
# same as m.to_a.values_at(...)
p m.values_at(0, 1, 2, 3, 4)      # => ["foobarbaz", "foo", "bar", "baz", nil]
p m.values_at(-1, -2, -3, -4, -5) # => ["baz", "bar", "foo", nil, nil]

m = /(?<a>\d+) *(?<op>[+\-*\/]) *(?<b>\d+)/.match("1 + 2")
m.to_a                   # => ["1 + 2", "1", "+", "2"]
m.values_at(:a, :b, :op) # => ["1", "2", "+"]
#@end

@see [[m:Array#values_at]], [[m:Array#[] ]]

--- names -> [String]

名前付きキャプチャの名前を文字列配列で返します。

self.regexp.names と同じです。

#@samplecode 例
/(?<foo>.)(?<bar>.)(?<baz>.)/.match("hoge").names
# => ["foo", "bar", "baz"]

m = /(?<x>.)(?<y>.)?/.match("a") # => #<MatchData "a" x:"a" y:nil>
m.names                          # => ["x", "y"]
#@end

--- regexp -> Regexp
自身の元になった正規表現オブジェクトを返します。

#@samplecode 例
m = /a.*b/.match("abc")
m.regexp # => /a.*b/
#@end

--- hash -> Integer

self のマッチ対象になった文字列、元になった正規表現オブジェクト、マッチ
した位置を元にハッシュ値を計算して返します。

--- eql?(other) -> bool
--- ==(other)   -> bool

self と other のマッチ対象になった文字列、元になった正規表現オブジェク
ト、マッチした位置が等しければ true を返します。そうでない場合には
false を返します。

@param other 比較対象のオブジェクトを指定します。

#@samplecode 文字列
s = "abc"
m1 = s.match("a")
m2 = s.match("b")
m1 == m2  # => false
m2 = s.match("a")
m1 == m2  # => true
#@end

#@samplecode 正規表現
r = /abc/
m1 = r.match("abc")   # => #<MatchData "abc">
m2 = r.match("abcde") # => #<MatchData "abc">
m1 == m2  # => false
m2 = r.match("abc")   # => #<MatchData "abc">
m1 == m2  # => true
#@end

#@samplecode 正規表現のマッチした位置
r = /abc/
m1 = r.match("abcabc")    # => #<MatchData "abc">
m2 = r.match("abcabc", 3) # => #<MatchData "abc">
m1 == m2  # => false
m2 = r.match("abcabc", 0) # => #<MatchData "abc">
m1 == m2  # => true
#@end

#@since 3.3.0
--- named_captures(symbolize_names: false) -> Hash
#@else
--- named_captures -> Hash
#@end

名前付きキャプチャをHashで返します。

Hashのキーは名前付きキャプチャの名前です。Hashの値はキーの名前に対応した名前付きグループのうち最後にマッチした文字列です。

@param symbolize_names 真を指定するとハッシュのキーを文字列ではなくシンボルにします。デフォルトは偽です。

#@samplecode 例
m = /(?<a>.)(?<b>.)/.match("01")
m.named_captures # => {"a" => "0", "b" => "1"}

m = /(?<a>.)(?<b>.)?/.match("0")
m.named_captures # => {"a" => "0", "b" => nil}

m = /(?<a>.)(?<a>.)/.match("01")
m.named_captures # => {"a" => "1"}

m = /(?<a>x)|(?<a>y)/.match("x")
m.named_captures # => {"a" => "x"}
#@since 3.3.0

m = /(?<a>.)(?<a>.)/.match("01")
m.named_captures(symbolize_names: true) #=> {:a => "1"}
#@end
#@end

#@since 3.2
@see [[m:MatchData#captures]], [[m:MatchData#deconstruct_keys]]
#@else
@see [[m:MatchData#captures]]
#@end
